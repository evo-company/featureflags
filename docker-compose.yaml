version: "3.9"

services:
  postgres:
    image: postgres:13-alpine
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: featureflags
    volumes:
      - "pg-data:/var/lib/postgresql/data"
      - "./seeds:/var/lib/postgresql/seeds"
    networks:
      - main
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "featureflags" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  backend: &backend
    image: featureflags-server-dev
    init: true
    tty: true
    stdin_open: true
    environment: &env
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      PYTHONIOENCODING: UTF-8
      PYTHONUNBUFFERED: 1
      CONFIG_PATH: configs/local.yaml
    networks:
      - main
    volumes:
      - ./featureflags:/app/featureflags
      - ./scripts:/app/scripts
      - ./configs:/app/configs
      - ./.ipython:/app/.ipython
      # Uncomment to mount local build of `featureflags_protobuf`
      - ./featureflags_protobuf:/app/featureflags_protobuf

  web:
    <<: *backend
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "127.0.0.1:8000:8000"
    command: pdm run watchfiles --filter python "python3 -m featureflags web" featureflags

  rpc:
    <<: *backend
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "127.0.0.1:50051:50051"
    command: pdm run watchfiles --filter python "python3 -m featureflags rpc" featureflags

  http:
    <<: *backend
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    command: pdm run watchfiles --filter python "python3 -m featureflags http" featureflags

  ishell:
    <<: *backend
    command: pdm run ipython --ipython-dir=/app/.ipython

  test:
    <<: *backend
    image: featureflags-server-test
    environment:
      <<: *env
      CONFIG_PATH: configs/test.yaml
    depends_on:
      postgres:
        condition: service_healthy
    command: pdm run test ${ARGS}

  docs:
    <<: *backend
    image: featureflags-server-docs
    command: sphinx-build -a -b html docs public

volumes:
  pg-data:
    driver: local

networks:
  main:
    driver: bridge
